<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gong</title>
  
  <subtitle>完成比完美更重要。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gongbojie.com/"/>
  <updated>2020-02-06T10:45:23.321Z</updated>
  <id>https://gongbojie.com/</id>
  
  <author>
    <name>Bojie Gong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js调用原生iOS</title>
    <link href="https://gongbojie.com/2020/02/06/JS%E4%B8%8EiOS%E4%BA%A4%E4%BA%92/"/>
    <id>https://gongbojie.com/2020/02/06/JS与iOS交互/</id>
    <published>2020-02-06T08:47:01.000Z</published>
    <updated>2020-02-06T10:45:23.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS调用iOS原生API"><a href="#JS调用iOS原生API" class="headerlink" title="JS调用iOS原生API"></a>JS调用iOS原生API</h2><h3 id="添加监听代理和JS接口"><a href="#添加监听代理和JS接口" class="headerlink" title="添加监听代理和JS接口"></a>添加监听代理和JS接口</h3><p>在OC中添加监听的接口代码：以JS脚本的接口 <code>btnClose</code> 为例：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般写在初始化WKWebView处</span></span><br><span class="line"><span class="built_in">WKWebViewConfiguration</span> *config = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line"><span class="built_in">WKUserContentController</span> *userCC = config.userContentController;</span><br><span class="line"><span class="comment">//MARK:在OC中添加监听的接口代码：JS脚本的接口名</span></span><br><span class="line">[userCC addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"btnClose"</span>];</span><br></pre></td></tr></table></figure><p>设置WKUserContentController的代理</p><p>设置代理类遵守WKScriptMessageHandler协议</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">WKScriptMessageHandler</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注册对JS接口监听，注入代理类</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[userCC addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"btnClose"</span>];</span><br></pre></td></tr></table></figure><p>实现WKUserContentController代理的回调方法,响应JS接口事件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.name isEqualToString:<span class="string">@"btnClose"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,message.body);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS脚本接口</p><p>JS接口声明格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.接口名.postMessage(<span class="string">'参数'</span>)</span><br></pre></td></tr></table></figure><p>接口名: 在WKWebView中，当JS执行该接口时，OC会拦截预先监听的接口，并处理相关事件。</p><p>参数：object类型，多个参数时需要封装为集合类型来实现多参传递。</p><p>当OC拦截到该接口时，可以在WKScriptMessageHandler回调方法中的WKScriptMessage参数实例中获取该参数值: message.body。</p><p>三个例子：</p><ol><li>JS无参调用OC</li></ol><p>当无参调用OC时，参数必须为null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.btnClose.postMessage(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>JS传参调用OC</li></ol><p>传递单个参数时，直接写入即可，例如：lil gong</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.showName.postMessage(<span class="string">'lil gong'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>传递多个参数时，需要封装为集合类型实现多参传递。</li></ol><p>例如:当传递一个电话，一条信息，需要封装为[‘18600000000’,’Go Camping!!!’]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.showSendMsg.postMessage([<span class="string">'18600000000'</span>, <span class="string">'Go Camping!!!'</span>])</span><br></pre></td></tr></table></figure><h3 id="iOS原生API调用JS脚本"><a href="#iOS原生API调用JS脚本" class="headerlink" title="iOS原生API调用JS脚本"></a>iOS原生API调用JS脚本</h3><p>在网页加载完成之后调用JS代码才会执行，因为这个时候html页面已经注入到webView中并且可以响应到对应方法。<br>例如调用JS函数<code>alertMobile()：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[self.wkWebView evaluateJavaScript:@&quot;alertMobile()&quot; completionHandler:^(id _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line">    //TODO</span><br><span class="line">    NSLog(@&quot;%@ %@&quot;,response,error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>在OC中为JS定义属性/函数</p><ul><li>当注入的类型字符串类型时，必须用’’括起来。</li><li>OC注入的参数为全局属性，在html中的JS脚本可以直接调用属性名来获取值。</li></ul><p>通过NSString形式，编写JS脚本，通过以下两种方式注入网页</p><p>方式一：在初始化WKWebView时，通过配置WKWebViewConfiguration的userContentController注入JS脚本 。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK:向网页中注入JS脚本例如，参数/函数等</span></span><br><span class="line"><span class="built_in">WKUserScript</span> *script = [[<span class="built_in">WKUserScript</span> alloc] initWithSource:<span class="string">@"var number = 0;"</span> injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentStart</span> forMainFrameOnly:<span class="literal">YES</span>];</span><br><span class="line"><span class="built_in">WKUserContentController</span> *userCC = config.userContentController;</span><br><span class="line">[userCC addUserScript:script];</span><br></pre></td></tr></table></figure><p>方式二：使用WKWebView实例方法evaluateJavaScript动态注入JS脚本</p><p>通常情况下在页面加载完成时注入</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation &#123;</span><br><span class="line">    [<span class="keyword">self</span>.wkWebView evaluateJavaScript:<span class="string">@"var number = 0;"</span> completionHandler:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止放大缩小</span></span><br><span class="line">    <span class="built_in">NSString</span> *urlString = [webView.URL absoluteString];</span><br><span class="line">    <span class="keyword">if</span> (![urlString containsString:<span class="string">@"SiEquityRecordQuery"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *injectionJSString = <span class="string">@"var script = document.createElement('meta');"</span></span><br><span class="line">        <span class="string">"script.name = 'viewport';"</span></span><br><span class="line">        <span class="string">"script.content=\"width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\";"</span></span><br><span class="line">        <span class="string">"document.getElementsByTagName('head')[0].appendChild(script);"</span>;</span><br><span class="line">        [webView evaluateJavaScript:injectionJSString completionHandler:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//导航栏配置</span></span><br><span class="line">    [webView evaluateJavaScript:<span class="string">@"document.title"</span> completionHandler:^(<span class="keyword">id</span> _Nullable title, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line"><span class="comment">//        self.navigationItem.title = title;</span></span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS调用iOS原生API&quot;&gt;&lt;a href=&quot;#JS调用iOS原生API&quot; class=&quot;headerlink&quot; title=&quot;JS调用iOS原生API&quot;&gt;&lt;/a&gt;JS调用iOS原生API&lt;/h2&gt;&lt;h3 id=&quot;添加监听代理和JS接口&quot;&gt;&lt;a href=&quot;#添加
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS推送证书相关</title>
    <link href="https://gongbojie.com/2020/02/06/iOS%E6%8E%A8%E9%80%81%E8%AF%81%E4%B9%A6%E7%9B%B8%E5%85%B3/"/>
    <id>https://gongbojie.com/2020/02/06/iOS推送证书相关/</id>
    <published>2020-02-06T07:37:56.000Z</published>
    <updated>2020-02-06T08:32:21.712Z</updated>
    
    <content type="html"><![CDATA[<p>iOS的推送证书有两种： <code>iOS Development</code>和<code>iOS Distribution</code>，一般开发式使用<code>iOS Development</code>，测试真是环境<code>(Distribution)</code>的话，必须是：</p><ol><li>Download app from <strong>App store</strong></li><li>Download app from <strong>TestFlight</strong></li><li><strong>AdHoc</strong></li></ol><p>拥有<code>Admin</code>以上权限的<code>Apple Developer</code></p><p>首先，要先有 <code>distribution certificate</code>，到 <a href="https://developer.apple.com/" target="_blank" rel="noopener">Apple Developer</a> 登录 -&gt; <code>Certificates</code>, <code>Identifiers &amp; Profiles</code>-&gt; <code>Certificates</code> ，选择<code>Production</code>，照着步骤新增<code>Certificate</code>。</p><p>接着到<code>Provisioning Profiles</code>-&gt; <code>Distribution</code>，建立一个<code>AdHoc</code>的<code>Distribution</code>。一步步完成后进行下载到本地后，双击进行安装。</p><p>接着到你的<code>iOS project</code>，<code>Target</code>-&gt;<code>General</code>的<code>Signing</code>选择对应的<code>provisionProfile</code>。</p><p>以上设置完成以后，接着就到<code>Product</code>-&gt; <code>Archive</code> ，<code>Build successful</code>后选择<code>Distribute App</code>。</p><p><img src="IMG_01.png" alt=""></p><p>一步步完成后就可以<code>Export</code>出來了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS的推送证书有两种： &lt;code&gt;iOS Development&lt;/code&gt;和&lt;code&gt;iOS Distribution&lt;/code&gt;，一般开发式使用&lt;code&gt;iOS Development&lt;/code&gt;，测试真是环境&lt;code&gt;(Distribution)&lt;/c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>适配iOS13相关Tips</title>
    <link href="https://gongbojie.com/2019/11/21/%E9%80%82%E9%85%8DiOS13%E7%9B%B8%E5%85%B3Tips/"/>
    <id>https://gongbojie.com/2019/11/21/适配iOS13相关Tips/</id>
    <published>2019-11-21T07:40:46.000Z</published>
    <updated>2019-12-27T06:20:01.941Z</updated>
    
    <content type="html"><![CDATA[<ol><li>模拟器调试暗黑模式</li></ol><p>打开模拟器-设置-开发者：<img src="IMG_01.png" alt=""> 打开选项，即可开启暗黑模式</p><ol start="2"><li>app禁止暗黑模式</li></ol><p>在info.plist中，增加一行key为User Interface Style value为Light，这样你的app就不会跟随手机设置的模式而改变了<br><img src="IMG_02.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;UIUserInterfaceStyle&lt;/key&gt;</span><br><span class="line">&lt;string&gt;Light&lt;/string&gt;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>ios13下模态跳转presentViewController</li></ol><p>在ios13下，苹果将 presentViewController默认的style改成了 UIModalPresentationAutomatic之前的是 UIModalPresentationFullScreen ，所以需要加一行代码，手动去选择<br><code>vc.modalPresentationStyle = UIModalPresentationFullScreen;</code><br><img src="IMG_03.png" alt=""></p><ol start="4"><li>ios13下获取状态栏的高度</li></ol><p>之前在APPDelegate下无法获取到，需要在界面加载完成的viewDidLoad后，才会获取到，这样处理，可以解决</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    <span class="comment">//写在super之前，可以更好的保证，在当前界面加载之前，将状态栏高度获取到</span></span><br><span class="line">    <span class="comment">//主要当时是将状态栏的高度注入JS，给H5调用，在super之后，web已经加载好了，高度获取的时机晚了</span></span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] statusBarFrame].size.height；</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>获取searchBar中的TextField方法更改，会引起崩溃</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前代码</span></span><br><span class="line">    <span class="built_in">UITextField</span> * searchField = [searchBar valueForKey:<span class="string">@"_searchField"</span>];</span><br><span class="line">    <span class="built_in">UILabel</span> *searchPlaceLabel = [searchField valueForKey:<span class="string">@"placeholderLabel"</span>];</span><br><span class="line">    searchPlaceLabel.textColor = [<span class="built_in">UIColor</span> colorWithHex:<span class="string">@"#999999"</span>];</span><br><span class="line">    [searchField setValue:[<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">14</span>] forKeyPath:<span class="string">@"_placeholderLabel.font"</span>];</span><br></pre></td></tr></table></figure><p>ios13之后把SearchBar中的textField直接暴露给开发者使用,无需在通过kvc获取。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改后</span></span><br><span class="line">    <span class="built_in">UITextField</span> * searchField = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">        searchField =searchBar.searchTextField;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        searchField = [searchBar valueForKey:<span class="string">@"_searchField"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableAttributedString</span> *arrStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:searchField.placeholder attributes:@&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14</span>],<span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> colorWithHex:<span class="string">@"#999999"</span>]&#125;];</span><br><span class="line">    searchField.attributedPlaceholder = arrStr;</span><br></pre></td></tr></table></figure><ol start="6"><li>获取statusBar，方法更新如下，会引起崩溃</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">UIStatusBarManager</span> *statusBarManager = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow.windowScene.statusBarManager;</span><br><span class="line">    <span class="keyword">if</span> ([statusBarManager respondsToSelector:<span class="keyword">@selector</span>(createLocalStatusBar)]) &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *_localStatusBar = [statusBarManager performSelector:<span class="keyword">@selector</span>(createLocalStatusBar)];</span><br><span class="line">        <span class="keyword">if</span> ([_localStatusBar respondsToSelector:<span class="keyword">@selector</span>(statusBar)]) &#123;</span><br><span class="line">            _statusBar = [_localStatusBar performSelector:<span class="keyword">@selector</span>(statusBar)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    _statusBar = [[[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@"statusBarWindow"</span>] valueForKey:<span class="string">@"statusBar"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>iOS13设置 UITabBarItem的选中颜色无效</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line"><span class="keyword">self</span>.tabBar.unselectedItemTintColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;模拟器调试暗黑模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开模拟器-设置-开发者：&lt;img src=&quot;IMG_01.png&quot; alt=&quot;&quot;&gt; 打开选项，即可开启暗黑模式&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;app禁止暗黑模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在in
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift中的宏定义</title>
    <link href="https://gongbojie.com/2019/09/09/Swift%E4%B8%AD%E7%9A%84%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>https://gongbojie.com/2019/09/09/Swift中的宏定义/</id>
    <published>2019-09-09T07:52:33.000Z</published>
    <updated>2019-09-09T08:03:15.397Z</updated>
    
    <content type="html"><![CDATA[<p><code>Swift</code>中是不能使用宏定义语法的，但是因为命名空间的缘故，我们可以给我们的项目添加一个空的<code>Const.swift</code>文件，在其中，我们将原本<code>oc</code>中不需要接受参数的宏，定义成<code>let</code>常量，将需要接受参数的宏定义成函数即可，由于我们的整个项目共享命名空间，我们就可以在项目内的任何地方直接使用<code>Const.swift</code>中定义的这些公共的常量和函数</p><ol><li>没有参数的宏</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//oc中的宏定义</span></span><br><span class="line">#define kIOS7   [<span class="type">UIDevice</span> currentDevice].systemVersion.doubleValue&gt;=<span class="number">7.0</span> ? <span class="number">1</span> :<span class="number">0</span></span><br><span class="line">#define kIOS8   [<span class="type">UIDevice</span> currentDevice].systemVersion.doubleValue&gt;=<span class="number">8.0</span> ? <span class="number">1</span> :<span class="number">0</span></span><br><span class="line">#define kScreenHeight     [<span class="type">UIScreen</span> mainScreen].bounds.size.height</span><br><span class="line">#define kScreenWidth      [<span class="type">UIScreen</span> mainScreen].bounds.size.width</span><br><span class="line"><span class="comment">//转换成swift的写法</span></span><br><span class="line"><span class="keyword">let</span> kIOS7 = <span class="type">Double</span>(<span class="type">UIDevice</span>().systemVersion)&gt;=<span class="number">7.0</span> ? <span class="number">1</span> :<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> kIOS8 = <span class="type">Double</span>(<span class="type">UIDevice</span>().systemVersion)&gt;=<span class="number">8.0</span> ? <span class="number">1</span> :<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kScreenHeight = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</span><br><span class="line"><span class="keyword">let</span> kScreenWidth = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br></pre></td></tr></table></figure><ol start="2"><li>接收参数的宏</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//oc写法</span></span><br><span class="line">#define <span class="type">RGBCOLOR</span>(r,g,b) [<span class="type">UIColor</span> colorWithRed:(r)/<span class="number">255.0</span> green:(g)/<span class="number">255.0</span> blue:(b)/<span class="number">255.0</span> alpha:<span class="number">1</span>]</span><br><span class="line"><span class="comment">//swift中的写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RGBCOLOR</span><span class="params">(r:CGFloat,<span class="number">_</span> g:CGFloat,<span class="number">_</span> b:CGFloat)</span></span> -&gt; <span class="type">UIColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIColor</span>(red: (r)/<span class="number">255.0</span>, green: (g)/<span class="number">255.0</span>, blue: (b)/<span class="number">255.0</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;中是不能使用宏定义语法的，但是因为命名空间的缘故，我们可以给我们的项目添加一个空的&lt;code&gt;Const.swift&lt;/code&gt;文件，在其中，我们将原本&lt;code&gt;oc&lt;/code&gt;中不需要接受参数的宏，定义成&lt;code&gt;let&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>隐私政策</title>
    <link href="https://gongbojie.com/2019/06/06/%E9%9A%90%E7%A7%81%E6%94%BF%E7%AD%96/"/>
    <id>https://gongbojie.com/2019/06/06/隐私政策/</id>
    <published>2019-06-06T09:08:29.000Z</published>
    <updated>2019-06-06T09:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。 您在同意本应用服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。</p><ol><li>适用范围</li></ol><p>(a) 在您注册本应用帐号时，您根据本应用要求提供的个人注册信息；<br>(b) 在您使用本应用网络服务，或访问本应用平台网页时，本应用自动接收并记录的您的浏览器和计算机上的信息，包括但不限于您的IP地址、浏览器的类型、使用的语言、访问日期和时间、软硬件特征信息及您需求的网页记录等数据；<br>(c) 本应用通过合法途径从商业伙伴处取得的用户个人数据。</p><p>您了解并同意，以下信息不适用本隐私权政策：</p><p>(a) 您在使用本应用平台提供的搜索服务时输入的关键字信息；<br>(b) 本应用收集到的您在本应用发布的有关信息数据，包括但不限于参与活动、成交信息及评价详情；<br>(c) 违反法律规定或违反本应用规则行为及本应用已对您采取的措施。</p><ol start="2"><li>信息使用</li></ol><p>(a)本应用不会向任何无关第三方提供、出售、出租、分享或交易您的个人信息，除非事先得到您的许可，或该第三方和本应用（含本应用关联公司）单独或共同为您提供服务，且在该服务结束后，其将被禁止访问包括其以前能够访问的所有这些资料。<br>(b) 本应用亦不允许任何第三方以任何手段收集、编辑、出售或者无偿传播您的个人信息。任何本应用平台用户如从事上述活动，一经发现，本应用有权立即终止与该用户的服务协议。<br>(c) 为服务用户的目的，本应用可能通过使用您的个人信息，向您提供您感兴趣的信息，包括但不限于向您发出产品和服务信息，或者与本应用合作伙伴共享信息以便他们向您发送有关其产品和服务的信息（后者需要您的事先同意）。</p><ol start="3"><li>信息披露在如下情况下，本应用将依据您的个人意愿或法律的规定全部或部分的披露您的个人信息：</li></ol><p>(a) 经您事先同意，向第三方披露；<br>(b) 为提供您所要求的产品和服务，而必须和第三方分享您的个人信息；<br>(c) 根据法律的有关规定，或者行政或司法机构的要求，向第三方或者行政、司法机构披露；<br>(d) 如您出现违反中国有关法律、法规或者本应用服务协议或相关规则的情况，需要向第三方披露；<br>(e) 如您是适格的知识产权投诉人并已提起投诉，应被投诉人要求，向被投诉人披露，以便双方处理可能的权利纠纷；<br>(f) 在本应用平台上创建的某一交易中，如交易任何一方履行或部分履行了交易义务并提出信息披露请求的，本应用有权决定向该用户提供其交易对方的联络方式等必要信息，以促成交易的完成或纠纷的解决。<br>(g) 其它本应用根据法律、法规或者网站政策认为合适的披露。</p><ol start="4"><li><p>信息存储和交换本应用收集的有关您的信息和资料将保存在本应用及（或）其关联公司的服务器上，这些信息和资料可能传送至您所在国家、地区或本应用收集信息和资料所在地的境外并在境外被访问、存储和展示。</p></li><li><p>Cookie的使用</p></li></ol><p>(a) 在您未拒绝接受cookies的情况下，本应用会在您的计算机上设定或取用cookies ，以便您能登录或使用依赖于cookies的本应用平台服务或功能。本应用使用cookies可为您提供更加周到的个性化服务，包括推广服务。<br>(b) 您有权选择接受或拒绝接受cookies。您可以通过修改浏览器设置的方式拒绝接受cookies。但如果您选择拒绝接受cookies，则您可能无法登录或使用依赖于cookies的本应用网络服务或功能。<br>(c) 通过本应用所设cookies所取得的有关信息，将适用本政策。</p><ol start="6"><li>信息安全</li></ol><p>(a) 本应用帐号均有安全保护功能，请妥善保管您的用户名及密码信息。本应用将通过对用户密码进行加密等安全措施确保您的信息不丢失，不被滥用和变造。尽管有前述安全措施，但同时也请您注意在信息网络上不存在“完善的安全措施”。<br>(b) 在使用本应用网络服务进行网上交易时，您不可避免的要向交易对方或潜在的交易对</p><ol start="7"><li>本隐私政策的更改</li></ol><p>(a)如果决定更改隐私政策，我们会在本政策中、本公司网站中以及我们认为适当的位置发布这些更改，以便您了解我们如何收集、使用您的个人信息，哪些人可以访问这些信息，以及在什么情况下我们会透露这些信息。<br>(b)本公司保留随时修改本政策的权利，因此请经常查看。如对本政策作出重大更改，本公司会通过网站通知的形式告知。</p><p>方披露自己的个人信息，如联络方式或者邮政地址。请您妥善保护自己的个人信息，仅在必要的情形下向他人提供。如您发现自己的个人信息泄密，尤其是本应用用户名及密码发生泄露，请您立即联络本应用客服，以便本应用采取相应措施。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具使用小Tips记录</title>
    <link href="https://gongbojie.com/2019/03/07/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%B0%8FTips%E8%AE%B0%E5%BD%95/"/>
    <id>https://gongbojie.com/2019/03/07/工具使用小Tips记录/</id>
    <published>2019-03-07T03:37:00.000Z</published>
    <updated>2019-12-02T02:52:33.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdowm"><a href="#Markdowm" class="headerlink" title="Markdowm"></a>Markdowm</h1><ol><li>markdown导出pdf时候强制换页，插入以下代码</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div STYLE="page-break-after: always;"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>手动触发tabbar的item</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// You can set the default index of the TabBarController by setting the selectedIndex property. This can be put in viewDidLoad or Before pushing the controller if you are doing it that way. This is done only when you are using a TabBarController and Not just a TabBar.</span><br><span class="line">tabBarController.selectedIndex = 1;</span><br><span class="line">// If you are using a TabBar without a TabBarController then you have to do it like this.</span><br><span class="line">self.tabBar.selectedItem = [self.tabBar.items objectAtIndex:1];</span><br></pre></td></tr></table></figure><h1 id="iOS相关"><a href="#iOS相关" class="headerlink" title="iOS相关"></a>iOS相关</h1><ol><li>iOS AFN网络请求失败401时，如何获取后台返回的内容</li></ol><p>开发中，会遇到当接口非200时，也需要去取后台返回的数据，以便客户端提示用。那怎拿到呢？就是在failure的回调里，加上下面代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSData *errorData = [error.userInfo objectForKey:AFNetworkingOperationFailingURLResponseDataErrorKey];</span><br><span class="line"></span><br><span class="line">NSString *responseString  = [[NSString alloc] initWithData:errorData encoding:NSUTF8StringEncoding];</span><br></pre></td></tr></table></figure><p>responseString字符串格式就是接口返回的内容。还可以转成字典：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:errorData options:NSJSONReadingAllowFragments error:nil];</span><br></pre></td></tr></table></figure><h1 id="XCode相关"><a href="#XCode相关" class="headerlink" title="XCode相关"></a>XCode相关</h1><ol><li><p>错误描述：</p><p> 虽然勾选了自动管理证书和描述文件，但实际上描述文件被指定为XXXXXX，导致冲突。</p><p> Code signing is required for product type ‘Unit Test Bundle’ in SDK ‘iOS 11.2’<br>这个应该是因为第一个错误产生的，可以不管，把第一个错误fix即可。</p><p> 解决办法：</p><p> 打开项目的project.pbxproj文件，全局搜索XXXXXX，把指定行删除然后保存即可。</p></li><li><p>错误描述：</p><p> <code>Undefined symbols for architecture armv7:</code></p><p> 解决办法：</p><p> 没有满足所有的架构 不支持4S手机<br> 找到  Build Settings 输入 Valid Architectures   删掉armv7  OK。问题解决。</p><blockquote><p>armv7｜armv7s｜arm64都是ARM处理器的指令集<br> armv7｜armv7s｜arm64都是ARM处理器的指令集<br> i386｜x86_64 是Mac处理器的指令集</p></blockquote><blockquote><p>arm64：iPhone6s | iphone6s plus｜iPhone6｜ iPhone6 plus｜iPhone5S | iPad Air｜ iPad mini2(iPad mini with Retina Display)</p></blockquote><blockquote><p>armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display)</p></blockquote><blockquote><p>armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4</p></blockquote><blockquote><p>i386是针对intel通用微处理器32位处理器</p></blockquote><blockquote><p>x86_64是针对x86架构的64位处理器</p></blockquote><blockquote><p>模拟器32位处理器测试需要i386架构，</p></blockquote><blockquote><p>模拟器64位处理器测试需要x86_64架构，</p></blockquote><blockquote><p>真机32位处理器需要armv7,或者armv7s架构，</p></blockquote><blockquote><p>真机64位处理器需要arm64架构。</p></blockquote><blockquote><p>Xcode中指令集相关选项（Build Setting中）</p></blockquote></li></ol><p>Architectures</p><p>指定工程被编译成可支持哪些指令集类型，而支持的指令集越多，就会编译出包含多个指令集代码的数据包，对应生成二进制包就越大，也就是ipa包会变大。</p><p>Valid Architectures</p><p>限制可能被支持的指令集的范围，也就是Xcode编译出来的二进制包类型最终从这些类型产生，而编译出哪种指令集的包，将由Architectures与Valid Architectures（因此这个不能为空）的交集来确定</p><p>Build Active Architecture Only</p><p>指定是否只对当前连接设备所支持的指令集编译</p><p>当其值设置为YES，这个属性设置为yes，是为了debug的时候编译速度更快，它只编译当前的architecture版本，而设置为no时，会编译所有的版本。 所以，一般debug的时候可以选择设置为yes，release的时候要改为no，以适应不同设备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdowm&quot;&gt;&lt;a href=&quot;#Markdowm&quot; class=&quot;headerlink&quot; title=&quot;Markdowm&quot;&gt;&lt;/a&gt;Markdowm&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;markdown导出pdf时候强制换页，插入以下代码&lt;/li&gt;
&lt;/ol&gt;
&lt;f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xcode打包上传AppStore问题</title>
    <link href="https://gongbojie.com/2019/01/25/Xcode%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0AppStore%E9%97%AE%E9%A2%98/"/>
    <id>https://gongbojie.com/2019/01/25/Xcode打包上传AppStore问题/</id>
    <published>2019-01-25T07:24:36.000Z</published>
    <updated>2019-01-25T09:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="IMG_01.jpg" alt=""></p><h1 id="1-ERROR-ITMS-90101"><a href="#1-ERROR-ITMS-90101" class="headerlink" title="1. ERROR ITMS-90101"></a>1. ERROR ITMS-90101</h1><p>ERROR ITMS-90101: “This bundle does not support one or more of the devices supported by the previous app version. Your app update must continue to support all devices previously supported. You declare supported devices in Xcode with the Targeted Device Family build setting.</p><p>与之前上传上架的应用的的Deployment Info中的Devices不一致<br>修改为一致即可</p><p><img src="IMG_02.png" alt=""></p><h1 id="2-ERROR-ITMS-90062"><a href="#2-ERROR-ITMS-90062" class="headerlink" title="2. ERROR ITMS-90062"></a>2. ERROR ITMS-90062</h1><p>ERROR ITMS-90062: “This bundle is invalid. The value for key CFBundleShortVersionString [100] in the Info.plist file must contain a higher version than that of the previously approved version [100].”</p><p>原因及解决办法:提交新版本时 CFBundleVersion 和 CFBundleShortVersionString 都要大于上个版本才行<br>它的提示应该是你的 CFBundleShortVersionString 没有大于之前的版本号</p><h1 id="3-ERROR-ITMS-90478"><a href="#3-ERROR-ITMS-90478" class="headerlink" title="3. ERROR ITMS-90478"></a>3. ERROR ITMS-90478</h1><p>同ERROR ITMS-90062构建版本问题</p><h1 id="4-ERROR-ITMS-90023"><a href="#4-ERROR-ITMS-90023" class="headerlink" title="4. ERROR ITMS-90023"></a>4. ERROR ITMS-90023</h1><p>ERROR ITMS-90023: “Missing required icon file”</p><p>缺少iPad或者iPhone的app icon。添加即可。</p><h1 id="5-ERROR-ITMS-90475"><a href="#5-ERROR-ITMS-90475" class="headerlink" title="5. ERROR ITMS-90475"></a>5. ERROR ITMS-90475</h1><p>ERROR ITMS-90475: “Invalid Bundle. iPad Multitasking support requires launch story board in bundle “</p><p>解决方法如下：<br>找到项目下TARGETS-&gt;General-&gt;Deployment Info将Requires full screen打上勾就OK了。</p><p><img src="IMG_03.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;IMG_01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-ERROR-ITMS-90101&quot;&gt;&lt;a href=&quot;#1-ERROR-ITMS-90101&quot; class=&quot;headerlink&quot; title=&quot;1. ERROR ITMS-90101
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>制作framework相关</title>
    <link href="https://gongbojie.com/2018/10/12/%E5%88%B6%E4%BD%9Cframework%E7%9B%B8%E5%85%B3/"/>
    <id>https://gongbojie.com/2018/10/12/制作framework相关/</id>
    <published>2018-10-11T16:12:38.000Z</published>
    <updated>2018-10-12T00:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态库-动态库和framework"><a href="#静态库-动态库和framework" class="headerlink" title="静态库 动态库和framework"></a>静态库 动态库和framework</h1><h2 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a>静态库和动态库的区别</h2><p>库：一段编译好的二进制代码，加上头文件可供别人使用。程序代码的集合，将N个文件组织起来，是共享程序代码的一种方式。</p><p>使用情景：</p><ol><li>给别人使用，但不希望暴露源码。以库的形式进行封装，只暴露出头文件。。</li><li>某些不会进行大的改动的代码，我们想减少编译的时间，就可以把它打包成库，因为库是已经编译好的二进制了，编译的时候只需要Link 一下，不会浪费编译时间。</li></ol><p>上面提到库在使用的时候需要 Link，Link 的方式有两种，静态和动态，于是便产生了静态库和动态库。</p><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><ul><li>.a</li><li>.framework</li></ul><p>静态库即静态链接库（Windows 下的 .lib，Linux 和 Mac 下的 .a）。之所以叫做静态，是因为静态库在编译的时候会被直接拷贝一份，复制到目标程序里，这段代码在目标程序里就不会再改变了。</p><p>静态库的好处很明显，编译完成之后，库文件实际上就没有作用了。目标程序没有外部依赖，直接就可以运行。当然其缺点也很明显，就是会使用目标程序的体积增大。</p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><ul><li>.dylib</li><li>.framework</li></ul><p>动态库即动态链接库（Windows 下的 .dll，Linux 下的 .so，Mac 下的 .dylib/.tbd）。与静态库相反，动态库在编译时并不会被拷贝到目标程序中，目标程序中只会存储指向动态库的引用。等到程序运行时，动态库才会被真正加载进来。</p><p>动态库的优点是，不需要拷贝到目标程序中，不会影响目标程序的体积，而且同一份库可以被多个程序使用（因为这个原因，动态库也被称作共享库）。同时，编译时才载入的特性，也可以让我们随时对库进行替换，而不需要重新编译代码。动态库带来的问题主要是，动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境。如果环境缺少动态库或者库的版本不正确，就会导致程序无法运行（Linux 下喜闻乐见的 lib not found 错误）。</p><h2 id="iOS-Framework"><a href="#iOS-Framework" class="headerlink" title="iOS Framework"></a>iOS Framework</h2><p>除了上面提到的 .a 和 .dylib/.tbd 之外，Mac OS/iOS 平台还可以使用 Framework。Framework 实际上是一种打包方式，将库的二进制文件，头文件和有关的资源文件打包到一起，方便管理和分发。</p><p>在 iOS 8 之前，iOS 平台不支持使用动态 Framework，开发者可以使用的 Framework 只有苹果自家的 UIKit.Framework，Foundation.Framework 等。这种限制可能是出于安全的考虑（见<a href="https://link.jianshu.com/?t=https://stackoverflow.com/questions/4733847/can-you-build-dynamic-libraries-for-ios-and-load-them-at-runtime" target="_blank" rel="noopener">这里的讨论</a>)。换一个角度讲，因为 iOS 应用都是运行在沙盒当中，不同的程序之间不能共享代码，同时动态下载代码又是被苹果明令禁止的，没办法发挥出动态库的优势，实际上动态库也就没有存在的必要了。</p><p>由于上面提到的限制，开发者想要在 iOS 平台共享代码，唯一的选择就是打包成静态库 .a 文件，同时附上头文件（例如<a href="https://link.jianshu.com/?t=https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419319164&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">微信的SDK</a>）。但是这样的打包方式不够方便，使用时也比较麻烦，大家还是希望共享代码都能能像 Framework 一样，直接扔到工程里就可以用。于是人们想出了各种奇技淫巧去让 Xcode Build 出 iOS 可以使用的 Framework，具体做法参考<a href="https://link.jianshu.com/?t=https://github.com/kstenerud/iOS-Universal-Framework" target="_blank" rel="noopener">这里</a>和<a href="https://link.jianshu.com/?t=https://github.com/jverkoey/iOS-Framework" target="_blank" rel="noopener">这里</a>，这种方法产生的 Framework 还有 “伪”(Fake) Framework 和 “真”(Real) Framework 的区别。</p><p>iOS 8/Xcode 6 推出之后，iOS 平台添加了动态库的支持，同时 Xcode 6 也原生自带了 Framework 支持（动态和静态都可以），上面提到的的奇技淫巧也就没有必要了（新的做法参考<a href="https://link.jianshu.com/?t=http://www.cocoachina.com/ios/20141126/10322.html" target="_blank" rel="noopener">这里</a>）。为什么 iOS 8 要添加动态库的支持？唯一的理由大概就是 Extension 的出现。Extension 和 App 是两个分开的可执行文件，同时需要共享代码，这种情况下动态库的支持就是必不可少的了。但是这种动态 Framework 和系统的 UIKit.Framework 还是有很大区别。系统的 Framework 不需要拷贝到目标程序中，我们自己做出来的 Framework 哪怕是动态的，最后也还是要拷贝到 App 中（App 和 Extension 的 Bundle 是共享的），因此苹果又把这种 Framework 称为<a href="https://link.jianshu.com/?t=https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html" target="_blank" rel="noopener">Embedded Framework</a>。</p><h2 id="静态库和动态库的区别-1"><a href="#静态库和动态库的区别-1" class="headerlink" title="静态库和动态库的区别"></a>静态库和动态库的区别</h2><ul><li>.a文件肯定是静态库，.dylib肯定是动态库，.framework可能是静态库也可能是动态库；</li><li>静态库在链接时，会被完整的复制到可执行文件中，如果多个App都使用了同一个静态库，那么每个App都会拷贝一份，缺点是浪费内存。类似于定义一个基本变量，使用该基本变量是是新复制了一份数据，而不是原来定义的；</li><li>动态库不会复制，只有一份，程序运行时动态加载到内存中，系统只会加载一次，多个程序共用一份，节约了内存。类似于使用变量的内存地址一样，使用的是同一个变量；</li><li>但是项目中如果使用了自己定义的动态库，苹果是不允许上架的，在iOS8.0以后苹果开放了动态加载.dylib的接口，用于挂载.dylib动态库</li></ul><h2 id="Swift-支持"><a href="#Swift-支持" class="headerlink" title="Swift 支持"></a>Swift 支持</h2><p>跟着 iOS8 / Xcode 6 同时发布的还有 Swift。如果要在项目中使用外部的代码，可选的方式只有两种，一种是把代码拷贝到工程中，另一种是用动态 Framework。使用静态库是不支持的。</p><p>造成这个问题的原因主要是 Swift 的运行库没有被包含在 iOS 系统中，而是会打包进 App 中（这也是造成 Swift App 体积大的原因），静态库会导致最终的目标程序中包含重复的运行库（这是<a href="https://link.jianshu.com/?t=https://github.com/ksm/SwiftInFlux#static-libraries" target="_blank" rel="noopener">苹果自家的解释</a>）。同时拷贝 Runtime 这种做法也会导致在纯 ObjC 的项目中使用 Swift 库出现问题。苹果声称等到 Swift 的 Runtime 稳定之后会被加入到系统当中，到时候这个限制就会被去除了（参考<a href="https://link.jianshu.com/?t=https://stackoverflow.com/questions/25020783/how-to-distribute-swift-library-without-exposing-the-source-code" target="_blank" rel="noopener">这个问题</a>的问题描述，也是来自苹果自家文档）。</p><h2 id="CocoaPods-的做法"><a href="#CocoaPods-的做法" class="headerlink" title="CocoaPods 的做法"></a>CocoaPods 的做法</h2><p>在纯 ObjC 的项目中，CocoaPods 使用编译静态库 .a 方法将代码集成到项目中。在 Pods 项目中的每个 target 都对应这一个 Pod 的静态库。不过在编译过程中并不会真的产出 .a 文件。如果需要 .a 文件的话，可以参考<a href="https://link.jianshu.com/?t=http://www.cnblogs.com/brycezhang/p/4117180.html" target="_blank" rel="noopener">这里</a>，或者使用<a href="https://link.jianshu.com/?t=https://github.com/CocoaPods/cocoapods-packager" target="_blank" rel="noopener">CocoasPods-Packager</a>这个插件。</p><p>当不想发布代码的时候，也可以使用 Framework 发布 Pod，CocoaPods 提供了vendored_framework选项来使用第三方 Framework，具体的做法可以参考<a href="https://link.jianshu.com/?t=http://www.telerik.com/blogs/how-to-use-a-third-party-framework-in-a-private-cocoapod" target="_blank" rel="noopener">这里</a>和<a href="https://link.jianshu.com/?t=https://stackoverflow.com/questions/18219286/podspec-link-binary-library" target="_blank" rel="noopener">这里</a>。</p><p>对于 Swift 项目，CocoaPods 提供了动态 Framework 的支持，通过use_frameworks!选项控制。</p><h1 id="制作静态库-framework"><a href="#制作静态库-framework" class="headerlink" title="制作静态库 .framework"></a>制作静态库 .framework</h1><ol><li>创建静态库工程，默认是动态库，修改Build Settings—&gt;Mach-O Type:Static Library<img src="http://jbcdn2.b0.upaiyun.com/2016/10/c1e36447ea240df6fa3685e47cc0223b.png" alt=""> <img src="http://jbcdn2.b0.upaiyun.com/2016/10/5aeb92b929c0f3e050d51c87d56feac2.png" alt=""></li><li>创建一个类，模拟静态库中的一个功能 <img src="http://jbcdn2.b0.upaiyun.com/2016/10/bbdfb691df44a73d580f23011693f5d4.png" alt=""></li><li>公开头文件<img src="http://jbcdn2.b0.upaiyun.com/2016/10/8603495f2a29e641ee133fac4fccc279.png" alt=""><img src="http://jbcdn2.b0.upaiyun.com/2016/10/ee31689627204143efb6a83292cad622.png" alt=""></li><li>将其他需要公开的头文件包含到总的头文件中<img src="http://jbcdn2.b0.upaiyun.com/2016/10/c7f83b729e98dffcd511b93993156aa8.png" alt="">iFly.h 是一个总的头文件，可以将其他需要公开的文件都统一写到总的头文件中，用户在使用的时候就导入这一个总的头文件即可</li><li>修改Build Settings–&gt;Build Active Architecture Only: NO, 将Scheme修改为Release 分别选择真机和模拟器进行编译 Command + B, 右键iFly.framework Show In Finder<img src="http://jbcdn2.b0.upaiyun.com/2016/10/bd6050b95476709335f4ea0f6b2a34b1.png" alt=""><img src="http://jbcdn2.b0.upaiyun.com/2016/10/bfa655554b0d7ae13ca084088f5271c8.png" alt=""></li><li>查看Release版本的模拟器和真机支持的架构<img src="http://jbcdn2.b0.upaiyun.com/2016/10/03d5bb2998dfe265ea6d40abb379c8b2.png" alt=""></li><li>创建一个项目进行测试，将Release-iphonesimulator下的iFly.framework拖进到工程中，并调用静态库中的方法<img src="http://jbcdn2.b0.upaiyun.com/2016/10/07c383ac95222ec157d6e0ce84d833c2.png" alt=""></li></ol><hr><p>PS：<br>参考：<a href="https://www.jianshu.com/p/ee2affaa3bac" target="_blank" rel="noopener">静态库，动态库与 Framework</a><br><a href="http://ios.jobbole.com/89871/" target="_blank" rel="noopener">iOS 静态库和动态库的基本介绍和使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态库-动态库和framework&quot;&gt;&lt;a href=&quot;#静态库-动态库和framework&quot; class=&quot;headerlink&quot; title=&quot;静态库 动态库和framework&quot;&gt;&lt;/a&gt;静态库 动态库和framework&lt;/h1&gt;&lt;h2 id=&quot;静态库和动
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xcode打包提交第三方包出错问题</title>
    <link href="https://gongbojie.com/2018/08/27/Xcode%E6%89%93%E5%8C%85%E6%8F%90%E4%BA%A4%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://gongbojie.com/2018/08/27/Xcode打包提交第三方包出错问题/</id>
    <published>2018-08-27T09:43:11.000Z</published>
    <updated>2018-08-27T10:27:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1fuoc0p6djaj20f705iq4a.jpg" alt=""></p><ol><li>第三方框架的plist文件，查看plist文件中，找出key是CFBundleExecutable(或者是Executable file)的配置行。一般都是在某些第三方的plist文件中。</li></ol><p><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1fuoc29g7i4j20yi0q8q9a.jpg" alt=""></p><ol start="2"><li>将找出所有第三方plist文件中的CFBundleExecutable行，CFBundleSupportedPlatforms行删除</li><li>重新打包，提交</li></ol><p><a href="https://stackoverflow.com/questions/32622899/itms-90535-unable-to-publish-ios-app-with-latest-google-signin-sdk" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/880fe8a4gy1fuoc0p6djaj20f705iq4a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第三方框架的plist文件，查看plist文件中，找出key是CFBundleE
      
    
    </summary>
    
    
      <category term="Xcode, App Store" scheme="https://gongbojie.com/tags/Xcode-App-Store/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目在SVN和Git中应该忽略的文件</title>
    <link href="https://gongbojie.com/2018/08/10/iOS%E9%A1%B9%E7%9B%AE%E5%9C%A8SVN%E5%92%8CGit%E4%B8%AD%E5%BA%94%E8%AF%A5%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>https://gongbojie.com/2018/08/10/iOS项目在SVN和Git中应该忽略的文件/</id>
    <published>2018-08-10T12:26:30.000Z</published>
    <updated>2018-08-11T02:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中，有些文件应该忽略，操作不当，有时候在Xcode项目中打了一个断点，就提示文件修改需要提交。下面就是我们需要注意的问题</p><a id="more"></a><p>###.DS_Store</p><p>添加忽略</p><h3 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h3><p>Pods 这个目录可以不提交，甚至 Podfile.lock 这个文件也可以不要，继而 .xcworkspace也可以不要，只要留一个Podfile文件，并在里面指定每个依赖库的版本号就够了，只要团队的每个人都有 CocoaPods 环境，每个人 pod install 后，在本地就能跑起来了。</p><h3 id="xcuserdata"><a href="#xcuserdata" class="headerlink" title="xcuserdata"></a>xcuserdata</h3><p>在项目根目录下，一般有 .xcodeproj 和 .xcworkspace文件，显示包内容可以看到都有 xcuserdata 文件夹，然后里面放着 username.xcuserdata文件夹，再点进去就是 UserInterfaceState.xcuserstate 和 Breakpoints_v2.xcbkptlist，这些都属于用户个人设置，像断点记录这样的文件肯定不能提交上去合并的，没有意义，也容易导致冲突。</p><h3 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h3><p>fastlane/report.xml<br>fastlane/Preview.html<br>fastlane/screenshots<br>fastlane/test_output</p><p>综上 简单配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Xcode</span><br><span class="line">.DS_Store</span><br><span class="line">build</span><br><span class="line">report.xml</span><br><span class="line">*.pbxuser</span><br><span class="line">!<span class="keyword">default</span>.pbxuser</span><br><span class="line">*.mode1v3</span><br><span class="line">!<span class="keyword">default</span>.mode1v3</span><br><span class="line">*.mode2v3</span><br><span class="line">!<span class="keyword">default</span>.mode2v3</span><br><span class="line">*.perspectivev3</span><br><span class="line">!<span class="keyword">default</span>.perspectivev3</span><br><span class="line">xcuserdata</span><br><span class="line">*.moved-aside</span><br><span class="line">DerivedData</span><br><span class="line">.idea</span><br><span class="line">*.hmap</span><br><span class="line">*.xccheckout</span><br><span class="line">*.xcworkspace</span><br><span class="line">!<span class="keyword">default</span>.xcworkspace</span><br><span class="line"></span><br><span class="line">#CocoaPods</span><br><span class="line">Pods</span><br><span class="line">Podfile.lock</span><br><span class="line">xcschemes</span><br><span class="line"></span><br><span class="line"><span class="meta"># fastlane</span></span><br><span class="line">fastlane/report.xml</span><br><span class="line">fastlane/Preview.html</span><br><span class="line">fastlane/screenshots</span><br><span class="line">fastlane/test_output</span><br></pre></td></tr></table></figure><h3 id="或者gitignore-io-选择自定义配置"><a href="#或者gitignore-io-选择自定义配置" class="headerlink" title="或者gitignore.io 选择自定义配置"></a>或者gitignore.io 选择自定义配置</h3><p>在<a href="https://www.gitignore.io/" target="_blank" rel="noopener">gitignore.io</a> 输入需要配置的语言，会自动生成一份配置。比如，输入 Objective-C 和 Swift 会帮助你生成下面的配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"># Created by https:<span class="comment">//www.gitignore.io/api/swift,objective-c</span></span><br><span class="line">### Objective-C ###</span><br><span class="line"># Xcode</span><br><span class="line">#</span><br><span class="line"><span class="meta"># gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore</span></span><br><span class="line">## Build generated</span><br><span class="line">build/</span><br><span class="line">DerivedData/</span><br><span class="line">## Various settings</span><br><span class="line">*.pbxuser</span><br><span class="line">!<span class="keyword">default</span>.pbxuser</span><br><span class="line">*.mode1v3</span><br><span class="line">!<span class="keyword">default</span>.mode1v3</span><br><span class="line">*.mode2v3</span><br><span class="line">!<span class="keyword">default</span>.mode2v3</span><br><span class="line">*.perspectivev3</span><br><span class="line">!<span class="keyword">default</span>.perspectivev3</span><br><span class="line">xcuserdata/</span><br><span class="line">## Other</span><br><span class="line">*.moved-aside</span><br><span class="line">*.xccheckout</span><br><span class="line">*.xcscmblueprint</span><br><span class="line">## Obj-C/Swift specific</span><br><span class="line">*.hmap</span><br><span class="line">*.ipa</span><br><span class="line">*.dSYM.zip</span><br><span class="line">*.dSYM</span><br><span class="line"># CocoaPods</span><br><span class="line">#</span><br><span class="line"># We recommend against adding the Pods directory to your .gitignore. However</span><br><span class="line"><span class="meta"># you should judge for yourself, the pros and cons are mentioned at:</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control</span></span></span><br><span class="line">#</span><br><span class="line"># Pods/</span><br><span class="line"># Carthage</span><br><span class="line">#</span><br><span class="line"># Add <span class="keyword">this</span> line <span class="keyword">if</span> you want to avoid checking in source code from Carthage dependencies.</span><br><span class="line"># Carthage/Checkouts</span><br><span class="line">Carthage/Build</span><br><span class="line"><span class="meta"># fastlane</span></span><br><span class="line">#</span><br><span class="line"># It is recommended to <span class="keyword">not</span> store the screenshots in the git repo. Instead, use fastlane to re-generate the</span><br><span class="line"><span class="meta"># screenshots whenever they are needed.</span></span><br><span class="line"># For more information about the recommended setup visit:</span><br><span class="line"><span class="meta"># https:<span class="comment">//docs.fastlane.tools/best-practices/source-control/#source-control</span></span></span><br><span class="line">fastlane/report.xml</span><br><span class="line">fastlane/Preview.html</span><br><span class="line">fastlane/screenshots</span><br><span class="line">fastlane/test_output</span><br><span class="line"># Code Injection</span><br><span class="line">#</span><br><span class="line"># After <span class="keyword">new</span> code Injection tools there's a generated folder /iOSInjectionProject</span><br><span class="line"># https:<span class="comment">//github.com/johnno1962/injectionforxcode</span></span><br><span class="line">iOSInjectionProject/</span><br><span class="line">### Objective-C Patch ###</span><br><span class="line">### Swift ###</span><br><span class="line"># Xcode</span><br><span class="line">#</span><br><span class="line"># gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore</span><br><span class="line">## Build generated</span><br><span class="line">## Various settings</span><br><span class="line">## Other</span><br><span class="line">## Obj-C/Swift specific</span><br><span class="line">## Playgrounds</span><br><span class="line">timeline.xctimeline</span><br><span class="line">playground.xcworkspace</span><br><span class="line"># Swift Package Manager</span><br><span class="line">#</span><br><span class="line"># Add <span class="keyword">this</span> line <span class="keyword">if</span> you want to avoid checking in source code from Swift Package Manager dependencies.</span><br><span class="line"># Packages/</span><br><span class="line"># Package.pins</span><br><span class="line">.build/</span><br><span class="line"># CocoaPods</span><br><span class="line">#</span><br><span class="line"># We recommend against adding the Pods directory to your .gitignore. However</span><br><span class="line"># you should judge <span class="keyword">for</span> yourself, the pros <span class="keyword">and</span> cons are mentioned at:</span><br><span class="line"># https:<span class="comment">//guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control</span></span><br><span class="line">#</span><br><span class="line"># Pods/</span><br><span class="line"># Carthage</span><br><span class="line">#</span><br><span class="line"># Add <span class="keyword">this</span> line <span class="keyword">if</span> you want to avoid checking in source code from Carthage dependencies.</span><br><span class="line"># Carthage/Checkouts</span><br><span class="line"># fastlane</span><br><span class="line">#</span><br><span class="line"># It is recommended to <span class="keyword">not</span> store the screenshots in the git repo. Instead, use fastlane to re-generate the</span><br><span class="line"># screenshots whenever they are needed.</span><br><span class="line"># For more information about the recommended setup visit:</span><br><span class="line"># https:<span class="comment">//docs.fastlane.tools/best-practices/source-control/#source-control</span></span><br><span class="line"># End of https:<span class="comment">//www.gitignore.io/api/swift,objective-c</span></span><br></pre></td></tr></table></figure><p>使用SVN的cornerstone是在设置中添加忽略<br><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1fu4w9qd4ujj20zo0zytlp.jpg" alt=""><br>使用Git的话，直接写入.gitignore文件即可</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>.gitignore 可以忽略没必要提交的文件和目录，极大地减轻冲突几率，也可以让远程仓库更小一些。项目一开始就配置好 .gitignore，只留一个 Podfile 即可。如果项目进行到一半，添加完 .gitignore 后，需要删除追踪文件并重新提交。</p><p>PS：使用Cornerstone的话，已经添加到服务器的文件是不能选择忽略的。在第一次提交到服务器的时候就需要做好忽略的。</p><p>参考文章： <a href="https://bingozb.github.io/37.html" target="_blank" rel="noopener">https://bingozb.github.io/37.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中，有些文件应该忽略，操作不当，有时候在Xcode项目中打了一个断点，就提示文件修改需要提交。下面就是我们需要注意的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode, Git, SVN" scheme="https://gongbojie.com/tags/Xcode-Git-SVN/"/>
    
  </entry>
  
  <entry>
    <title>OSX High Sierra 10.13 装cocoapods踩坑</title>
    <link href="https://gongbojie.com/2018/07/28/OSX-High-Sierra-10-13-%E8%A3%85cocoapods%E8%B8%A9%E5%9D%91/"/>
    <id>https://gongbojie.com/2018/07/28/OSX-High-Sierra-10-13-装cocoapods踩坑/</id>
    <published>2018-07-28T09:35:02.000Z</published>
    <updated>2018-09-26T07:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关掉SIP"><a href="#关掉SIP" class="headerlink" title="关掉SIP"></a>关掉SIP</h2><p>步骤：</p><ol><li>进入Recovery Mode模式: 重启Mac，按住Command + R键直到Apple Logo出现 </li><li>关闭SIP：点击工具里的Terminal（终端），输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure><ol start="4"><li>重启Mac，重启完成后，终端中输入 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chflags norestricted /usr/local &amp;&amp; sudo chown -R $(whoami):admin /usr/local</span><br></pre></td></tr></table></figure><p>关闭SIP完毕</p><p>PS:（如果想重新开启安全设置，则重复1、2步骤，输入csrutil enable就可以了）</p><p>原因：10.13版本加强了权限的限制，尤其是对/usr/local目录，默认开通 SIP （System Intergrity Protection），它禁止了软件以root身份在Mac上运行，不管你是在终端中如何运行。</p><a id="more"></a><h2 id="换源："><a href="#换源：" class="headerlink" title="换源："></a>换源：</h2><p>请尽可能用比较新的 RubyGems 版本，建议 2.6.x 以上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gem update --system # 这里请翻墙一下</span><br><span class="line">$ gem -v</span><br><span class="line">2.6.3</span><br></pre></td></tr></table></figure></p><p>更换源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">https://gems.ruby-china.com</span><br><span class="line"># 确保只有 gems.ruby-china.com</span><br></pre></td></tr></table></figure><h2 id="部署cocoapods"><a href="#部署cocoapods" class="headerlink" title="部署cocoapods"></a>部署cocoapods</h2><p>在cocoapods慢到吐血的情况下 选择国内镜像吧 </p><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/" target="_blank" rel="noopener">清华大学镜像站</a></p><p>新版的 CocoaPods 不允许用pod repo add直接添加master库了，使用以下方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.cocoapods/repos </span><br><span class="line">$ pod repo remove master</span><br><span class="line">$ git clone https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git master</span><br></pre></td></tr></table></figure><p>最后进入自己的工程，在自己工程的podFile第一行加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &apos;https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关掉SIP&quot;&gt;&lt;a href=&quot;#关掉SIP&quot; class=&quot;headerlink&quot; title=&quot;关掉SIP&quot;&gt;&lt;/a&gt;关掉SIP&lt;/h2&gt;&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入Recovery Mode模式: 重启Mac，按住Command + R键直到Apple Logo出现 &lt;/li&gt;
&lt;li&gt;关闭SIP：点击工具里的Terminal（终端），输入&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;csrutil disable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;重启Mac，重启完成后，终端中输入 &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo chflags norestricted /usr/local &amp;amp;&amp;amp; sudo chown -R $(whoami):admin /usr/local&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关闭SIP完毕&lt;/p&gt;
&lt;p&gt;PS:（如果想重新开启安全设置，则重复1、2步骤，输入csrutil enable就可以了）&lt;/p&gt;
&lt;p&gt;原因：10.13版本加强了权限的限制，尤其是对/usr/local目录，默认开通 SIP （System Intergrity Protection），它禁止了软件以root身份在Mac上运行，不管你是在终端中如何运行。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>由AFN的url encode请求引发的问题</title>
    <link href="https://gongbojie.com/2018/07/19/AFN%E7%9A%84urlencode%E8%AF%B7%E6%B1%82/"/>
    <id>https://gongbojie.com/2018/07/19/AFN的urlencode请求/</id>
    <published>2018-07-19T06:42:27.000Z</published>
    <updated>2018-08-11T02:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中的网络请求大多数情况下使json格式返回，但是有时候也有其他的格式。</p><h2 id="Postman中使用url-encode"><a href="#Postman中使用url-encode" class="headerlink" title=" Postman中使用url encode"></a><i class="fab fa-internet-explorer"></i> Postman中使用url encode</h2><p><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1ftfaqhy4ndj20uk092q49.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1ftfano5tswj20uk0aj3zt.jpg" alt=""></p><a id="more"></a><h2 id="AFN常规请求"><a href="#AFN常规请求" class="headerlink" title="AFN常规请求"></a>AFN常规请求</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line">    manager.requestSerializer=[AFJSONRequestSerializer serializer];<span class="comment">//申明请求的数据是json类型</span></span><br><span class="line">    manager.responseSerializer = [AFJSONResponseSerializer serializer];<span class="comment">//申明返回的结果是json类型</span></span><br><span class="line">    [manager POST:hostUrl parameters:dic success:^(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> responseObject) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"success--%@--%@"</span>,[responseObject <span class="keyword">class</span>],responseObject);</span><br><span class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"failure--%@"</span>,error);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><p>发现返回结果报错</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">failure--Error Domain=com.alamofire.error.serialization.response Code=-1011 "Request failed: unsupported media type (415)" </span><br><span class="line">UserInfo=&#123;NSLocalizedDescription=Request failed: unsupported media type (415), NSUnderlyingError=0x1c0646930 </span><br><span class="line">&#123;Error Domain=com.alamofire.error.serialization.response Code=-1016 "Request failed: unacceptable content-type: text/html" </span><br><span class="line">UserInfo=&#123;NSLocalizedDescription=Request failed: unacceptable content-type: text/html, NSErrorFailingURLKey=http:</span><br><span class="line"></span><br><span class="line">Headers &#123;</span><br><span class="line">    Content-Type = (</span><br><span class="line">    text/html;charset=utf-8,</span><br><span class="line">);</span><br><span class="line">    Content-Length = (</span><br><span class="line">    1092,</span><br><span class="line">);</span><br><span class="line">    Server = (</span><br><span class="line">    Apache-Coyote/1.1,</span><br><span class="line">);</span><br><span class="line">    Date = (</span><br><span class="line">    Thu, 19 Jul 2018 09:43:07 GMT,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意到code=-1011，错误码为415，text/html;charset=utf-8</p><p>接着加上请求的编码格式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">后经验证 这一行设置代码可以删除 使用 manager.requestSerializer = [AFHTTPRequestSerializer serializer]; 即可</span><br><span class="line"></span><br><span class="line">[manager.requestSerializer setValue:<span class="string">@"application/x-www-form-urlencoded;"</span> forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br></pre></td></tr></table></figure><p>发现时json编码格式，不对<br>接着查看AFN的请求Header，加上以下代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSHTTPURLResponse</span> *response = (<span class="built_in">NSHTTPURLResponse</span> *)task.response;</span><br><span class="line"><span class="built_in">NSDictionary</span> *allHeaders = response.allHeaderFields;</span><br></pre></td></tr></table></figure><p>allHeaders中的数据<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Content-Type = application/json;</span><br><span class="line">    Content-Length = 63;</span><br><span class="line">    Server = Apache-Coyote/1.1;</span><br><span class="line">    Date = Thu, 19 Jul 2018 09:49:12 GMT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以进行到请求成功里面，但是返回的POST的提交的数据却无法提交，返回结果为提交的数据为空，表示提交的数据编码不对，修改请求的编码序列化<br><del>manager.requestSerializer = [AFJSONRequestSerializer serializer];</del></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.requestSerializer = [AFHTTPRequestSerializer serializer];</span><br></pre></td></tr></table></figure><p>然后可以正常进行数据请求了。</p><hr><p>参考文章：</p><ol><li><a href="https://www.jianshu.com/p/81e648ac3589" target="_blank" rel="noopener">AFNetworking报错:(415 Domain=com.alamofire.error.serialization.response Code=-1011 “Request failed: unsupported media type (415)”)</a></li><li><a href="https://www.jianshu.com/p/2580c05d5a1d" target="_blank" rel="noopener">AFN Post请求中出现的问题</a></li><li><a href="https://juejin.im/post/5a71289c5188252edb592f5f" target="_blank" rel="noopener">AFNetworking之AFURLRequestSerialization深入学习</a></li><li><a href="https://juejin.im/entry/58f850eb0ce4630061105c8d" target="_blank" rel="noopener">AFNetWorking 源码分析之 AFHTTPSessionManager</a></li><li><a href="https://www.jianshu.com/p/a9f09052eaed" target="_blank" rel="noopener">使用 AFNetworking3.0请求时如何获取响应头文件</a></li><li><a href="https://www.jianshu.com/p/22075e7db6f7" target="_blank" rel="noopener">AFNetworking源码解析</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中的网络请求大多数情况下使json格式返回，但是有时候也有其他的格式。&lt;/p&gt;
&lt;h2 id=&quot;Postman中使用url-encode&quot;&gt;&lt;a href=&quot;#Postman中使用url-encode&quot; class=&quot;headerlink&quot; title=&quot; Postman中使用url encode&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fab fa-internet-explorer&quot;&gt;&lt;/i&gt; Postman中使用url encode&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/880fe8a4gy1ftfaqhy4ndj20uk092q49.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/880fe8a4gy1ftfano5tswj20uk0aj3zt.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fastlane使用小记</title>
    <link href="https://gongbojie.com/2018/06/29/fastlane%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://gongbojie.com/2018/06/29/fastlane使用小记/</id>
    <published>2018-06-29T13:22:26.000Z</published>
    <updated>2018-07-19T06:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前就用过<a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">fastlane</a>作为持续集成自动化的打包上传的工具，目前为止使用在企业账号打包 上传<a href="https://fir.im/" target="_blank" rel="noopener">fir.im</a>。今天又再次使用和之前的版本有些变化,主要注意的有以下几点</p><a id="more"></a><h2 id="升级fastlane"><a href="#升级fastlane" class="headerlink" title=" 升级fastlane"></a><i class="fas fa-rocket"></i> 升级fastlane</h2><p>因为之前就用过fastlane，所以以免出现问题就需要升级</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] gem install fastlane -NV</span><br></pre></td></tr></table></figure><p>之前使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update fastlane</span><br></pre></td></tr></table></figure><p>一直升级不成功，后面发现一定要先用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall fastlane</span><br></pre></td></tr></table></figure><p>删除旧版本，再重新安装，才能装到最新版本。</p><h2 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a>Appfile</h2><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure><p>初始化完毕后选择手动lane后就可以在Appfile和Fastfile进行编辑</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app_identifier <span class="string">"com.XXX.XXX"</span> <span class="comment"># App的Bundle id</span></span><br><span class="line">apple_id <span class="string">"email@example.com"</span> <span class="comment"># apple id的账号</span></span><br><span class="line">team_id <span class="string">"XXXXXXXXX"</span> <span class="comment"># 开发者Team id 可以在开发者网站进行查看https://developer.apple.com/account/#/membership</span></span><br></pre></td></tr></table></figure><h2 id="Fastfile-打包设置"><a href="#Fastfile-打包设置" class="headerlink" title="Fastfile 打包设置"></a>Fastfile 打包设置</h2><p>在这之间编写代码，也就是编写动作<a href="https://docs.fastlane.tools/actions" target="_blank" rel="noopener">action</a>，</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:XXX</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gym(</span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">"XXX"</span>,</span><br><span class="line">      <span class="comment"># 导出方法选择 adhoc enterprise(企业证书) app-store(上架App Store) development(开发证书)</span></span><br><span class="line">      <span class="symbol">export_method:</span><span class="string">"development"</span>,</span><br><span class="line">      <span class="symbol">export_xcargs:</span> <span class="string">"-allowProvisioningUpdates"</span>, <span class="comment"># 解决升级Xcode 9 后 fastlane gym 不允许访问钥匙串里的内容造成的打包错误</span></span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">provisioningProfiles:</span> &#123; </span><br><span class="line">        <span class="comment"># 在路径中 查找匹配的证书 ~/Library/MobileDevice/Provisioning Profiles</span></span><br><span class="line">          <span class="string">"com.XXX.XXX"</span> =&gt; <span class="string">"XXXX.mobileprovision"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="symbol">output_directory:</span><span class="string">"./fastlane/build"</span>, <span class="comment"># 输出路径</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="上传firim设置"><a href="#上传firim设置" class="headerlink" title="上传firim设置"></a>上传firim设置</h2><p>运行之前要安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin versioning</span><br><span class="line">fastlane add_plugin firim</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在fir.im官网查看API token</span></span><br><span class="line">firim(</span><br><span class="line">      <span class="symbol">firim_api_token:</span> <span class="string">"API token Number"</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>具体细节可参考:<a href="http://devhy.com/2018/01/23/26-fastlane-usage/" target="_blank" rel="noopener">http://devhy.com/2018/01/23/26-fastlane-usage/</a></p><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前就用过&lt;a href=&quot;https://docs.fastlane.tools/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fastlane&lt;/a&gt;作为持续集成自动化的打包上传的工具，目前为止使用在企业账号打包 上传&lt;a href=&quot;https://fir.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fir.im&lt;/a&gt;。今天又再次使用和之前的版本有些变化,主要注意的有以下几点&lt;/p&gt;
    
    </summary>
    
    
      <category term="fastlane" scheme="https://gongbojie.com/tags/fastlane/"/>
    
  </entry>
  
  <entry>
    <title>Xocde无法打开工程</title>
    <link href="https://gongbojie.com/2018/06/19/Xocde%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E5%B7%A5%E7%A8%8B/"/>
    <id>https://gongbojie.com/2018/06/19/Xocde无法打开工程/</id>
    <published>2018-06-19T07:25:52.000Z</published>
    <updated>2019-03-07T03:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在打开项目的.xcworkspace时候，发现出现错误无法运行<br><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1fsgj20beq9j21400oejuy.jpg" alt=""><br><a id="more"></a><br><img src="http://ww1.sinaimg.cn/large/880fe8a4gy1fsgj27kutij21400oeq6o.jpg" alt=""></p><p>再次打开工程文件.xcodeproj，也是无法打开<br><img src="http://ww1.sinaimg.cn/mw690/880fe8a4gy1fsgizr9ssoj20bs04t0t9.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load project at &apos;xxx&apos;, incompatible project version.</span><br></pre></td></tr></table></figure><p>然后排除cocoapods的原因，发现创建项目时使用的是Xcode 9.3而自己的Xcode版本是9.2，所以无法打开。</p><p>解决办法：</p><ol><li>将Xcode升级到9.3</li><li>修改项目中的配置使项目可以用低版本xcode打开<img src="http://ww1.sinaimg.cn/large/880fe8a4gy1fsgjbeppnqj229i0ke457.jpg" alt=""></li></ol><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在打开项目的.xcworkspace时候，发现出现错误无法运行&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/880fe8a4gy1fsgj20beq9j21400oejuy.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="https://gongbojie.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>旷野之息初体验</title>
    <link href="https://gongbojie.com/2018/02/01/%E6%97%B7%E9%87%8E%E4%B9%8B%E6%81%AF%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://gongbojie.com/2018/02/01/旷野之息初体验/</id>
    <published>2018-02-01T14:28:55.000Z</published>
    <updated>2018-02-02T13:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fo1cqh6ifrj20zk0k00xi.jpg" alt=""></p><a id="more"></a><p><i class="fas fa-chess-queen fa-5x"></i><br>一月中旬拿到的NS，提前购买了旷野之息（一直打成 荒野之息 还是根据官方翻译来吧），不巧的是，还没有普通版，就拿了个贵45大洋的限定版（一张地图海报以及画册一本），其实作为塞尔达迷，也不太有收藏的想法，觉得完整体验过后就好。</p><p> 一直等到2月1号中文补丁放出才正式开坑，不过到到手的时候略微体验一下。偷偷通过了第一个迷宫就封盘了。还好忍住了。不过一知半解的状态下，确实少了乐趣，玩起来吃力。紧接着时间点就到了1月31，新增中文补丁的前夜。凑个热闹也跑到NS吧看了看，比较有趣，有提前拿到偷跑中文版的来晒图片，然后评论都是嫉妒。查了查时间，东京时间为UTC +9比北京时间UTC +8晚一个小时相当于北京1月31日23点时，东京为2月1日零时，按照这个逻辑等到了北京时间11时，查看了一次更新，没有，出乎预料的是奥德赛却刷出了更新包，不过版本号没有变化，更新内容也不是很清楚。惯例那就盼着零点，更新，同样，并没有。算了那就休息吧，明天一定就有了。一觉醒来，等到九点果然刷来了更新包。看来还是宣布日期上午九点才是靠谱时间。</p><p> 果不其然，从9月底宣布增添中文到次年2月才正式发布，中文的质量很高，选择界面特别是和UI和字体融为一体，阅读起来很舒服。</p><p> 虽然已经体验过一次游戏的开端，但是再次体验到林克睁开双眼苏醒到站在山顶,接着视野镜头慢慢拉向身后，背景音乐响起，一览无遗的风景，很震撼与感动。</p><p> 开放世界，塞尔达传统解密要素玩法与收集要素，玩起来很充实的感觉。最初接触塞尔达系列是GBA上的缩小帽，主线剧情就很有趣，收集月亮碎片的支线，使得更加丰富。后面的时之笛，梅祖拉的假面，众神的三角力量2，都是迷宫，道具，增加体力（心心），最后打倒加农。但是这一作荒野之息给我最直接的感受就是地图的广阔，新手区的的地形就很丰富，平原，草原，森林，湖泊，废弃的城堡，还有山丘，森林中有野猪，可以进行狩猎收集食材，树上有果实可以采集，还有打倒怪物掉落的素材进行收集，这些物品可以烹饪，直接食用进行补充体力，精力，以及补充属性。给我最大的感受就是除了进行迷宫的探索，体力精力的增加，武器装备的升级，就是想到各处去探索。与以前作品相比，最大的改变就是增加了精力槽与武器的耐久度，爬山，快速跑，游泳等等都需要体力，这就给探索地形上带来了更多的考虑，不像之前一样，你需要完成特定的剧情，或者特定的装备才能进行探索，否则你无法到达某个地方，也就多了一个选择，你可以通过别的方式到处探索，食物补充，绕道登顶。这样更加巩固了开放时间这个基调。</p><p> 整个游戏流程就是通过初期的四个迷宫后，即获取了四个能力，以及一个降落物品，你就可以进行全部的探索了，期间你可以进行体力和精力上限的增加，以及服装和武器的获取，之后就可以攻打大boss加农了，当然，你也可以跳过这个“期间”。</p><p> 对于未知世界的好奇与探索，应该就是荒野之息给我的乐趣，以及驱使着你玩下去的动力。<br> <img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fo2flxg9ouj20zk0k0adw.jpg" alt=""></p><p> <head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/880fe8a4ly1fo1cqh6ifrj20zk0k00xi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://gongbojie.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Nintendo Switch, Zelda" scheme="https://gongbojie.com/tags/Nintendo-Switch-Zelda/"/>
    
  </entry>
  
  <entry>
    <title>使用vps搭建梯子</title>
    <link href="https://gongbojie.com/2018/01/25/%E4%BD%BF%E7%94%A8vps%E6%90%AD%E5%BB%BA%E6%A2%AF%E5%AD%90/"/>
    <id>https://gongbojie.com/2018/01/25/使用vps搭建梯子/</id>
    <published>2018-01-25T02:28:41.000Z</published>
    <updated>2018-01-31T09:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作学习生活上使用YouTube，Google较多，在前两天使用的某上网利器到期后，发现套餐贵且流量少遂而萌生自建梯子的打算。话不多说，直接进入步骤。<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="VPS与Vultr"><a href="#VPS与Vultr" class="headerlink" title=" VPS与Vultr"></a><i class="fas fa-globe"></i> VPS与Vultr</h3><p>VPS(Virtual private server) 译作虚拟专用伺服器。你可以把它简单地理解为一台在远端的强劲电脑。当你租用了它以后，可以给它安装操作系统、软件，并通过一些工具连接和远程操控它。</p><p><a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a>是一家 VPS 服务器提供商，有美国、亚洲、欧洲等多地的 VPS。它家的服务器以性价比高闻名，按时间计费，最低的资费为每月 $5。相当于国内的阿里云和腾讯云。</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>SSH 是一种网络协议，作为每一台 Linux 电脑的标准配置，用于计算机之间的加密登录。当你为租用的 VPS 安装 Linux 系统后，只要借助一些工具，就可以用 SSH 在你自己的 Mac/PC 电脑上远程登录该 VPS 了。</p><h2 id="购买和连接-VPS"><a href="#购买和连接-VPS" class="headerlink" title="购买和连接 VPS"></a>购买和连接 VPS</h2><h3 id="注册-Vultr"><a href="#注册-Vultr" class="headerlink" title="注册 Vultr"></a>注册 Vultr</h3><p>可以使用我的<a href="https://www.vultr.com/?ref=7316038" target="_blank" rel="noopener">推荐链接</a>进行注册，之前双方都有活动。</p><h3 id="部署-VPS"><a href="#部署-VPS" class="headerlink" title="部署 VPS"></a>部署 VPS</h3><p>注册完成后，在左边选择“Servers”标签，点击右边的加号部署新的服务器。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnso0zksdqj20x108nmyn.jpg" alt=""></p><p>接下来选择一个你想要的节点。个人认为近一点的地区比较快点，试了东京和新加坡的，感觉东京的明显更快，但第一次创建东京分配的IP就被墙了。</p><p>（PS:我在选择的时候出现了一点小状况，就是创建节点的IP被墙，也就是无法连接网络了，这里创建好节点后建议去<a href="http://ping.pe" target="_blank" rel="noopener">ping.me</a>测试一下，根据地点查看如果国外节点全部能够访问（绿色），国内节点无法访问（红色）则被墙无疑，可以再次创建节点，重新分配IP试试）</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnswtq6ecnj20ox0i3q5i.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnso91ccy0j20tz0bxtap.jpg" alt=""></p><p>为 VPS 选择安装系统。这里选 CentOS 6x64，因为相较其他 Linux 系统更适配「锐速」，一个提高连接 VPS 速度的软件。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsoa5qty7j20tn0g4dhr.jpg" alt=""></p><p>根据需求选择套餐。只供个人科学上网用的话，$5 绰绰有余。2.5刀的售罄只能选这个，足够用。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsoc75iwyj20tx0fnjui.jpg" alt=""></p><p>剩下都可以使用默认值。最后一项你可以自定义服务器的名字和标签，以方便区分。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsodr1owuj20tx0iemz2.jpg" alt=""></p><p>另外，上图第 6 步中，SSH Keys 的作用是，可以让你登录 VPS 时不用每次手动输密码。若只将其用作 Shadowsocks 服务器，仅需要在配置时登录一次，可以完全忽略它。</p><pre><code>PS:生成SSH KEY1. 在终端输入ssh-keygen -t rsa 2. 接着就会提示你想要保存的目录可以直接复制提示默认目录一般都在 ~/.ssh 这个文件夹里面。3. 为你的key添加密码，直接回车可以不输入密码。 4. 然后就在上面的这个目录中找到你的公钥~/.ssh/id_rsa.pub复制好粘贴你的ssh key中就好了。</code></pre><p>点击就可以创建虚拟主机了。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsotxeo32j20tz02qwes.jpg" alt=""></p><p>等待系统安装完成。当显示“Running”时，就表示部署已完成。之后你可以随时停用、重启或销毁它。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsov1wuorj20u203qq36.jpg" alt=""></p><h3 id="连接-VPS"><a href="#连接-VPS" class="headerlink" title=" 连接 VPS"></a><i class="fas fa-terminal"></i> 连接 VPS</h3><p>Mac 只要打开「终端」应用即可开始使用 SSH 连接 VPS。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsp3w4867j20ks0cuglw.jpg" alt=""></p><p>首先，在 Vultr 上你刚部署的服务器右边点“Manage”，找到服务器的 IP 地址和密码。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsp7iu792j20ua0b475u.jpg" alt=""></p><p>在终端中，输入下面的命令并回车。注意把<host>替换成你服务器的IP地址。</host></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;host&gt;</span><br></pre></td></tr></table></figure><p>接下来屏幕上会出现一连串提示，意为无法确认 host 主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？直接输入 yes 并回车。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnspd7e4ujj20kb021t8x.jpg" alt=""></p><p>然后输入密码，也就是把服务器状态页中密码那块复制一下，再 ⌘ + v 贴过来。这里不管是输入还是粘贴，屏幕上都不会显示字符，所以贴完后也是看不到字符的，回车就行。</p><p>当出现上图那串 [root@vultr ~]# 时，说明已成功登录。</p><h2 id="部署-Shadowsocks"><a href="#部署-Shadowsocks" class="headerlink" title="部署 Shadowsocks "></a>部署 Shadowsocks <i class="far fa-paper-plane"></i></h2><h3 id="部署-Shadowsocks-服务器端"><a href="#部署-Shadowsocks-服务器端" class="headerlink" title="部署 Shadowsocks 服务器端 "></a>部署 Shadowsocks 服务器端 <i class="fas fa-code"></i></h3><p>以下是3条命令，每次输入一行、回车，等待屏幕上的操作完成后再输入下一条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnspi023foj20k8010mxb.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnspjv4l8zj20kb0190sw.jpg" alt=""></p><p>最后一步输完，你应该会看到下图中内容──是要你为 Shadowsocks 服务设置一个个人密码。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnspmwbvw1j20g00ld40y.jpg" alt=""></p><p>依次输入密码 端口（1-635535之间的数字都行），然后选择加密模式。<br>遵照上图指示，按任意键开始部署 Shadowsocks。这时你什么都不用做，只需要静静地等它运行完就好。结束后就会看到你所部署的 Shadowsocks 的配置信息。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsppvo7wij20kc06174z.jpg" alt=""></p><p>记住其中黄框中的内容，也就是服务器 IP、服务器端口、你设的密码和加密方式。</p><h3 id="TCP-Fast-Open"><a href="#TCP-Fast-Open" class="headerlink" title="TCP Fast Open"></a>TCP Fast Open</h3><p>但是为了更好的连接速度，你还需要多做几步。</p><p>首先是打开 TCP Fast Open，输入以下命令，意为用 nano 这个编辑器打开一个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/rc.local</span><br></pre></td></tr></table></figure><p>用方向键把光标移到最末端，粘贴下面这一行内容，然后按 Ctrl + X 退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</span><br></pre></td></tr></table></figure><p>输入“Y”并回车确认退出。</p><p>接着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在文末加上下面的内容，保存退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_fastopen = 3</span><br></pre></td></tr></table></figure><p>再打开一个 Shadowsocks 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>把其中 “fast_open” 一项的 false 替换成 true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;fast_open&quot;:true</span><br></pre></td></tr></table></figure><p>如果你希望添加多用户的话，可以将 “password” 字段如下图修改。其中，”22345”:”password1”意为该用户使用 22345 端口、以“password1”为密码连接登录 Shadowsocks。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsptpz7xnj20fu09jjro.jpg" alt=""></p><p>保存退出。最后，输入以下命令重启 Shadowsocks。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><h3 id="设置Shadowsocks-客户端"><a href="#设置Shadowsocks-客户端" class="headerlink" title="设置Shadowsocks 客户端"></a>设置Shadowsocks 客户端</h3><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnspwtms4tj20gf0ekq3o.jpg" alt=""></p><h2 id="开启锐速"><a href="#开启锐速" class="headerlink" title="开启锐速"></a>开启锐速</h2><p>锐速 ServerSpeeder 是一个 TCP 加速软件，对 Shadowsocks 客户端和服务器端间的传输速度有显著提升。<br>首先需要用 SSH 登录 VPS。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;host&gt;</span><br></pre></td></tr></table></figure><p>CentOS更换内核，提供锐速可用的内核下载</p><p>CentOS6 内核更换为： 2.6.32-504.3.3.el6.x86_64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm</span><br><span class="line">rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>CentOS7 内核更换为： 3.10.0-229.1.2.el7.x86_64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>查看内核是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure></p><p>如果显示里面有这个内核就对了。</p><p><img src="http://ww1.sinaimg.cn/large/880fe8a4ly1fnsw8qxr97j20kh03edgf.jpg" alt=""></p><p>重启并且查看内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>更换好内核后，开始安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令打开配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /serverspeeder/etc/config</span><br></pre></td></tr></table></figure><p>将 advinacc 的 0 改为 1，保存并退出。<br>退出「终端」程序。<br>至此，整个搭建过程就完成了。</p><p><i class="fas fa-plane fa-10x"></i></p><hr><p>参考文章：<br><a href="https://www.91yun.co/archives/795" target="_blank" rel="noopener">教程：CentOS更换内核，提供锐速可用的内核下载</a><br><a href="https://zoomyale.com/2016/vultr_and_ss/" target="_blank" rel="noopener">科学上网的终极姿势:在 Vultr VPS 上搭建 Shadowsocks</a><br><a href="https://www.banwago.com/1265.html" target="_blank" rel="noopener">怎样检查IP被墙</a><br><a href="https://www.centos.bz/2017/08/ssh-host-key-verification-failed/" target="_blank" rel="noopener">解决SSH出现HOST KEY VERIFICATION FAILED错误的方法</a></p><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于工作学习生活上使用YouTube，Google较多，在前两天使用的某上网利器到期后，发现套餐贵且流量少遂而萌生自建梯子的打算。话不多说，直接进入步骤。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Next 主题集成Disqus评论</title>
    <link href="https://gongbojie.com/2017/04/25/Hexo-Next-%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Disqus%E8%AF%84%E8%AE%BA/"/>
    <id>https://gongbojie.com/2017/04/25/Hexo-Next-主题集成Disqus评论/</id>
    <published>2017-04-25T10:23:25.000Z</published>
    <updated>2018-07-19T06:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo默认集成了disqus<br><a id="more"></a></p><h1 id="Step-1-登录注册disqus"><a href="#Step-1-登录注册disqus" class="headerlink" title="Step 1 登录注册disqus"></a>Step 1 登录注册disqus</h1><p>首先进入<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus官网</a>注册登录，然后选择<img src="http://ww1.sinaimg.cn/mw690/880fe8a4ly1fez4qa0c8fj20xp0m6q9o.jpg" alt=""><br>接下来填写唯一的website Name，这个需要在后面配置hexo主题用到<br><img src="http://ww1.sinaimg.cn/mw690/880fe8a4ly1fez53mg5scj20xs0jsmyk.jpg" alt=""><br>category可以随意填写</p><p>下一步<br><img src="http://ww1.sinaimg.cn/mw690/880fe8a4ly1fez564rgjhj20xt0m8dhy.jpg" alt=""><br>直接选择Configure Disqus website URL填写自己博客的网站域名</p><h1 id="Step-2-修改hexo配置文件"><a href="#Step-2-修改hexo配置文件" class="headerlink" title="Step 2 修改hexo配置文件"></a>Step 2 修改hexo配置文件</h1><p>编辑 主题配置文件</p><ul><li>[HEXO_PATH]/themes/next/_config.yml</li></ul><p>将 disqus 下的 enable 设定为 true，同时填写在Disqus配置的shortname。count 用于指定是否显示评论数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname: your-short-name</span><br><span class="line">  count: true</span><br></pre></td></tr></table></figure><p>修改完成后 最好在Terminal运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>然后输入hexo server 就会出现Disqus评论效果<br><img src="http://ww1.sinaimg.cn/mw690/880fe8a4ly1fez5abc5llj20lo0hxta2.jpg" alt=""></p><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo默认集成了disqus&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo评论" scheme="https://gongbojie.com/tags/Hexo%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>wxPython安装</title>
    <link href="https://gongbojie.com/2017/04/19/wxPython%E5%AE%89%E8%A3%85/"/>
    <id>https://gongbojie.com/2017/04/19/wxPython安装/</id>
    <published>2017-04-19T10:54:30.000Z</published>
    <updated>2018-07-19T06:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wxPython安装步骤"><a href="#wxPython安装步骤" class="headerlink" title=" wxPython安装步骤"></a><i class="fab fa-python fa-spin"></i> wxPython安装步骤</h1><ol><li><p>安装homebrew</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>利用homebrew安装wxpython</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wxpython</span><br></pre></td></tr></table></figure></li></ol><p>输入命令：brew info wxpython 查看安装信息。这时wxpython就安装上了。</p><ol start="3"><li><p>接下来就是要将wx库和python连接到一起。<br>首先（Python console输入）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import site; site.getsitepackages()</span><br></pre></td></tr></table></figure><p> 得到</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages&apos;, &apos;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/site-python&apos;, &apos;/Library/Python/2.7/site-packages&apos;]</span><br></pre></td></tr></table></figure></li></ol><p>其中：/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python为系统的python安装路径，/Library/Python/2.7/site-packages就是python的 site-packages 目录。</p><pre><code>然后找到wxpython的wx模块，它在下面的目录中wx文件夹：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/wxpython/3.0.2.0/lib/python2.7/site-packages/wx-3.0-osx_cocoa</span><br></pre></td></tr></table></figure>接下来就是，给wx文件夹制作一个软链接，并将这个软链接放到python的 site-packages 目录下。具体步骤：1.进入python的 site-packages 目录：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Python/2.7/site-packages/</span><br></pre></td></tr></table></figure>2.输入命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/Cellar/wxpython/3.0.2.0/lib/python2.7/site-packages/wx-3.0-osx_cocoa/wx wx</span><br></pre></td></tr></table></figure>其中ln -s是制作软链接的命令，后面为wx模块路径，最后的wx为软链接的名字。</code></pre><p>暴力方法(目前还未使用到)：<br>如果上面的方法不行的话，直接到wx模块所在的路径下，为wx文件夹制作替身，然后将替身拷贝到python的site-packages目录下就OK了。</p><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;wxPython安装步骤&quot;&gt;&lt;a href=&quot;#wxPython安装步骤&quot; class=&quot;headerlink&quot; title=&quot; wxPython安装步骤&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fab fa-python fa-spin&quot;&gt;&lt;/i&gt; wxPython安装步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装homebrew&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://gongbojie.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>修改MySQL默认密码</title>
    <link href="https://gongbojie.com/2016/03/22/%E4%BF%AE%E6%94%B9MySQL%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81/"/>
    <id>https://gongbojie.com/2016/03/22/修改MySQL默认密码/</id>
    <published>2016-03-22T03:04:34.000Z</published>
    <updated>2018-08-11T02:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac-MySQL修改密码"><a href="#mac-MySQL修改密码" class="headerlink" title=" mac MySQL修改密码"></a><i class="fas fa-database"></i> mac MySQL修改密码</h2><ol><li>关闭mysql服务</li><li>进入终端输入：cd /usr/local/mysql/bin/</li><li>回车后 登录管理员权限 sudo su</li><li>回车后输入以下命令来禁止mysql验证功能 ./mysqld_safe –skip-grant-tables &amp;</li><li>回车后mysql会自动重启（偏好设置中mysql的状态会变成running）</li><li>输入命令 ./mysql</li><li>回车后，输入命令 FLUSH PRIVILEGES; </li><li>回车后，输入命令 SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘你的新密码’);</li></ol><a id="more"></a><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mac-MySQL修改密码&quot;&gt;&lt;a href=&quot;#mac-MySQL修改密码&quot; class=&quot;headerlink&quot; title=&quot; mac MySQL修改密码&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fas fa-database&quot;&gt;&lt;/i&gt; mac MySQL修改密码&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;关闭mysql服务&lt;/li&gt;
&lt;li&gt;进入终端输入：cd /usr/local/mysql/bin/&lt;/li&gt;
&lt;li&gt;回车后 登录管理员权限 sudo su&lt;/li&gt;
&lt;li&gt;回车后输入以下命令来禁止mysql验证功能 ./mysqld_safe –skip-grant-tables &amp;amp;&lt;/li&gt;
&lt;li&gt;回车后mysql会自动重启（偏好设置中mysql的状态会变成running）&lt;/li&gt;
&lt;li&gt;输入命令 ./mysql&lt;/li&gt;
&lt;li&gt;回车后，输入命令 FLUSH PRIVILEGES; &lt;/li&gt;
&lt;li&gt;回车后，输入命令 SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘你的新密码’);&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://gongbojie.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Xcode利用git提交已创建项目</title>
    <link href="https://gongbojie.com/2015/09/06/Xcode%E5%88%A9%E7%94%A8git%E6%8F%90%E4%BA%A4%E5%B7%B2%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>https://gongbojie.com/2015/09/06/Xcode利用git提交已创建项目/</id>
    <published>2015-09-06T07:39:36.000Z</published>
    <updated>2018-07-19T06:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下,提交已有项目总是会出现项目名称后面的符号 <strong><em>_?_</em></strong> ,正确的提交步骤如下:<br><a id="more"></a></p><ol><li>在<a href="http://git.oschina.net" target="_blank" rel="noopener">oschina</a>或者<a href="http://github.com" target="_blank" rel="noopener">github</a>上创建新项目</li><li>创建完成后,命令行 git clone + 新项目地址 到本地文件夹,并且接着把已有的项目文件移动到该文件夹</li><li><p>利用终端进入到该工程的目录下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/gong/Desktop/WORK/XXXXX</span><br><span class="line">git init</span><br><span class="line">git add . </span><br><span class="line">git commit -m ‘initial’</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>打开Xcode,点击 Source Control 点击 Push 即可提交所有代码</li></ol><p><head><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script><br>    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script><br></head> </p><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下,提交已有项目总是会出现项目名称后面的符号 &lt;strong&gt;&lt;em&gt;_?_&lt;/em&gt;&lt;/strong&gt; ,正确的提交步骤如下:&lt;br&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="https://gongbojie.com/tags/Xcode/"/>
    
  </entry>
  
</feed>
